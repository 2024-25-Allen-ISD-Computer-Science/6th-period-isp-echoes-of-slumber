from turtle import Screen
import pygame
import sys

pygame.init()

# screen setup
info = pygame.display.Info()
screenWidth, screenHeight = info.current_w, info.current_h
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption("Game")

# font setup
dialogueFont = pygame.font.Font("januaryNight/januaryNight.ttf", 36)
promptFont = pygame.font.Font("januaryNight/januaryNight.ttf", 28)

# temp color setup
WHITE = (255, 255, 255)
BLUE = (0, 0, 255)
BLACK = (0, 0, 0)

buttonColor = (220, 220, 250)
buttonHover = (180, 180, 250)

characterSpeed = 10

# character setup
shopkeeperSprite = pygame.image.load("shopkeeperSprite.png")
shopkeeperSprite = pygame.transform.scale(shopkeeperSprite, (190, 250))
shopkeeperRect = shopkeeperSprite.get_rect(topleft=(300, 200))
shopkeeperHeadshot = pygame.transform.scale(pygame.image.load("shopkeeperHeadshot.png"), (100, 100))

character_images = {
    "idle": pygame.transform.scale(pygame.image.load("mainSprite.png"), (250, 250)),
    "walk_right": pygame.transform.scale(pygame.image.load("characterRightProfile.png"), (250, 250)),
    "walk_left": pygame.transform.scale(pygame.image.load("characterLeftProfile.png"), (250, 250))
}

mainSprite = character_images["idle"]
mainRect = mainSprite.get_rect(topleft=(screenWidth/2 - 125, screenHeight/2 - 125))

# dialogue setup
dialogue_text = "Would you like to purchase something?"
# holds what text is currently displayed
current_text = ""
# tracks # of characters to display
text_index = 0
# num of frames between each character's appearance
typing_speed = 3
typing_counter = 0

show_dialogue = False
show_prompt = False  # show "Talk (F)" prompt

# proximity detection range
interaction_distance = 150  

# yes/no buttons for shopkeeper's store
yes_rect = pygame.Rect(screenWidth // 2 - 150, screenHeight * (4 / 5) + 90, 100, 50)
no_rect = pygame.Rect(screenWidth // 2 + 50, screenHeight * (4 / 5) + 90, 100, 50)

# shop menu state
in_shop_menu = False
shop_rect = pygame.Rect(screenWidth // 4, screenHeight // 4, screenWidth // 2, screenHeight // 2)
close_shop_rect = pygame.Rect(screenWidth // 2 + 200, screenHeight // 2 + 110, 100, 50)

# main loop
clock = pygame.time.Clock()
running = True
current_direction = "idle"

while running:
    screen.fill(WHITE)

    # if in shop menu, display the shop menu screen
    if in_shop_menu:
        pygame.draw.rect(screen, (115, 98, 86), shop_rect.inflate(10, 10))
        pygame.draw.rect(screen, (200, 200, 255), shop_rect)
        shop_text = dialogueFont.render("The Shop", True, (0, 0, 0))
        screen.blit(shop_text, (screenWidth // 2 - shop_text.get_width() // 2, screenHeight // 4 + 20))

        # buttons for purchasing items
        health_shop_rect = pygame.Rect(screenWidth // 3, screenHeight // 2 - 100, 360, 50)
        damage_shop_rect = pygame.Rect(screenWidth // 3, screenHeight // 2 - 35, 360, 50)
        
        pygame.draw.rect(screen, buttonColor, health_shop_rect)
        pygame.draw.rect(screen, buttonColor, damage_shop_rect)

        health_shop_text = dialogueFont.render("+1 Health - 10 Dream Shards", True, BLACK)
        damage_shop_text = dialogueFont.render("+1 Damage - 15 Dream Shards", True, BLACK)
        
        screen.blit(health_shop_text, (health_shop_rect.x + 10, health_shop_rect.y + 10))
        screen.blit(damage_shop_text, (damage_shop_rect.x + 10, damage_shop_rect.y + 10))

        # draw the close button
        pygame.draw.rect(screen, buttonColor, close_shop_rect)
        close_shop_text = dialogueFont.render("Close", True, BLACK)
        screen.blit(close_shop_text, (close_shop_rect.x + 20, close_shop_rect.y + 10))

        if health_shop_rect.collidepoint(pygame.mouse.get_pos()):
            pygame.draw.rect(screen, buttonHover, health_shop_rect)
            screen.blit(health_shop_text, (health_shop_rect.x + 10, health_shop_rect.y + 10))
        if damage_shop_rect.collidepoint(pygame.mouse.get_pos()):
            pygame.draw.rect(screen, buttonHover, damage_shop_rect)
            screen.blit(damage_shop_text, (damage_shop_rect.x + 10, damage_shop_rect.y + 10))
        if close_shop_rect.collidepoint(pygame.mouse.get_pos()):
            pygame.draw.rect(screen, buttonHover, close_shop_rect)
            screen.blit(close_shop_text, (close_shop_rect.x + 20, close_shop_rect.y + 10))
        
        # Handle clicks in shop menu
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if health_shop_rect.collidepoint(pygame.mouse.get_pos()):
                    print("temp")
                elif damage_shop_rect.collidepoint(pygame.mouse.get_pos()):
                    print("temp")
                elif close_shop_rect.collidepoint(pygame.mouse.get_pos()):
                    in_shop_menu = False
    else:
        # drawing the character
        screen.blit(shopkeeperSprite, shopkeeperRect)
        screen.blit(mainSprite, mainRect)


        # check proximity
        distance = pygame.math.Vector2(mainRect.center).distance_to(shopkeeperRect.center)
        # show prompt only if not already in dialogue
        show_prompt = distance < interaction_distance and not show_dialogue  

        mouse_pos = pygame.mouse.get_pos()

        # user interaction
        # if user quits the game, stop clock
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if show_dialogue:
                    if yes_rect.collidepoint(mouse_pos):
                        show_dialogue = False  # close dialogue after selection
                        in_shop_menu = True
                    elif no_rect.collidepoint(mouse_pos):
                        show_dialogue = False
                elif show_prompt and shopkeeperRect.collidepoint(mouse_pos):
                    show_dialogue = True
                    current_text = ""
                    text_index = 0
                    typing_counter = 0
            # # if character is clicked, show dialogue
            # if event.type == pygame.MOUSEBUTTONDOWN:
            #     if shopkeeperRect .collidepoint(event.pos):
            #         show_dialogue = True
            #         # reset displayed text
            #         current_text = ""
            #         text_index = 0
            #         typing_counter = 0
            # if right/left/up/down is clicked, character will move
        keys = pygame.key.get_pressed()
        moving = False

        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            mainRect.x -= characterSpeed
            current_direction = "walk_left"
            moving = True
        if keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            mainRect.x += characterSpeed
            current_direction = "walk_right"
            moving = True
        if keys[pygame.K_UP] or keys[pygame.K_w]:
            mainRect.y -= characterSpeed
            moving = True
        if keys[pygame.K_DOWN] or keys[pygame.K_s]:
            mainRect.y += characterSpeed
            current_direction = "idle"
            moving = True

        # change sprite based on key pressed
        mainSprite = character_images[current_direction] if moving else character_images[current_direction]

        # press 'F' to interact
        if keys[pygame.K_f] and show_prompt:
            show_dialogue = True
            current_text = ""
            text_index = 0
            typing_counter = 0

        # display "Talk (F)" prompt if near shopkeeper
        if show_prompt:
            prompt_text = promptFont.render("Talk (F)", True, BLACK)
            prompt_rect = prompt_text.get_rect(midtop=(shopkeeperRect.centerx, shopkeeperRect.top - 20))
            screen.blit(prompt_text, prompt_rect)

        if show_dialogue:
            dialogue_box = pygame.Rect(screenWidth // 2 - 300, screenHeight * (4/5) - 30, 600, 100)  # box dimensions
            pygame.draw.rect(screen, (92, 95, 127), dialogue_box)
            pygame.draw.rect(screen, (202, 211, 228), dialogue_box.inflate(-10, -10))  # inner border
            screen.blit(shopkeeperHeadshot, (screenWidth // 2 - 300, screenHeight * (4/5) - 30))

            # text animation
            if text_index < len(dialogue_text):
                typing_counter += 1
                if typing_counter % typing_speed == 0:
                    text_index += 1
                    current_text = dialogue_text[:text_index]
                
            text_surface = dialogueFont.render(current_text, True, (115, 98, 86))
            screen.blit(text_surface, (dialogue_box.x + 130, dialogue_box.y + 35))
        
        # draw buttons with hover effect
            pygame.draw.rect(screen, buttonHover if yes_rect.collidepoint(mouse_pos) else buttonColor, yes_rect)
            pygame.draw.rect(screen, buttonHover if no_rect.collidepoint(mouse_pos) else buttonColor, no_rect)

            yes_text = dialogueFont.render("Yes", True, BLACK)
            no_text = dialogueFont.render("No", True, BLACK)
            screen.blit(yes_text, (yes_rect.x + 30, yes_rect.y + 10))
            screen.blit(no_text, (no_rect.x + 30, no_rect.y + 10))
    
    # update display
    pygame.display.flip()
    # set tick/framerate
    clock.tick(60)




